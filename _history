{"entries":[{"timestamp":1744884069612,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"?TM^^^LgrT*hM/wXL_]^\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\":OFMwI0#YR9~nuXU~*ZR\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"// Two cases : bound for position or client who searching position\n\nfunction ConfigureBoundary(position: number) {\n    basic.clearScreen()\n    radio.setGroup(1);\n    led.setBrightness(255)\n    radio.setTransmitSerialNumber(true)\n\n    let transmitPower = 6;\n    input.onButtonPressed(Button.A, () => {\n        transmitPower = (transmitPower + 1) % 8\n        radio.setTransmitPower(transmitPower)\n        basic.showNumber(transmitPower)\n    })\n    input.onButtonPressed(Button.B, () => { })\n    radio.onReceivedString(msg => {\n        if (msg !== \"REQ\") {\n            return;\n        }\n        basic.pause(position * 150)\n        const id = radio.receivedPacket(1);\n        radio.sendString(`ACK:${id}:${position}`)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.showIcon(IconNames.Square)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.pause(300)\n        basic.clearScreen()\n    })\n}\n\nfunction transformPower(value: number): number {\n    // Affine function y = x (-√2/20) + 5√2\n    return value * (Math.sqrt(2) / -20) + 5 * Math.sqrt(2);\n}\n\nfunction computePosition(strengths: number[]) {\n    //basic.showIcon(IconNames.Rollerskate)\n    const longDistance = Math.sqrt(2) * 4\n    // Transform power to relative distance. 100 is distance 0, 50 is half, 20 is long (arbiatrary)\n    const dA = transformPower(strengths[0]);\n    const dB = transformPower(strengths[1]);\n    const dC = transformPower(strengths[2]);\n    // Resolve equation\n    const y = Math.sqrt(dA * dA - Math.pow((dA * dA - dB * dB + 16) / 8, 2))\n    const x = Math.sqrt(dA * dA - y * y)\n    basic.clearScreen()\n    led.plot(x, y)\n}\n\nfunction ConfigureClient() {\n    radio.setGroup(1)\n\n    radio.setTransmitSerialNumber(true)\n    led.setBrightness(255)\n    basic.clearScreen()\n    let strengths = [0, 0, 0]\n    let count = 0\n    input.onButtonPressed(Button.A, () => {\n        strengths = [0, 0, 0]\n        //basic.clearScreen()\n        radio.sendString(\"REQ\")\n    });\n\n    radio.onReceivedString(msg => {\n        if (msg.indexOf(\"ACK:\") === 0) {\n            const id = parseInt(msg.split(\":\")[1])\n            if (id !== control.deviceSerialNumber()) {\n                return;\n            }\n        } else {\n            return;\n        }\n        const position = parseInt(msg.split(\":\")[2])\n        const signal = radio.receivedPacket(2) + 128\n        strengths[position] = signal;\n        showReception(strengths.filter(v => v !== 0).length)\n        if (!strengths.some(v => v === 0)) {\n            computePosition(strengths);\n        }\n    })\n}\n\nfunction showReception(value: number) {\n    basic.clearScreen();\n    led.plot(0, 0)\n    if (value > 1) {\n        led.plot(1, 0)\n    }\n    if (value > 2) {\n        led.plot(2, 0)\n    }\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if (this.isBoundary) {\n            new ChooseBoundaryPosition((position: number) => ConfigureBoundary(position));\n        } else {\n            ConfigureClient();\n        }\n    }\n}\n\nclass KindConfig {\n    constructor(next: (isBoudary: boolean) => void, private isBoundary: boolean = true) {\n        input.onButtonPressed(Button.A, () => this.changeKind());\n        input.onButtonPressed(Button.B, () => next(this.isBoundary));\n        this.show();\n    }\n    changeKind() {\n        this.isBoundary = !this.isBoundary;\n        this.show();\n    }\n    show() {\n        if (this.isBoundary) {\n            basic.showIcon(IconNames.Square)\n        } else {\n            basic.clearScreen()\n            led.plot(2, 2)\n        }\n    }\n}\n\nclass ChooseBoundaryPosition {\n    constructor(next: (position: number) => void, private position: number = 0) {\n        input.onButtonPressed(Button.A, () => this.changePosition());\n        input.onButtonPressed(Button.B, () => next(this.position));\n        this.show();\n    }\n    changePosition() {\n        this.position = (this.position + 1) % 3;\n        this.show();\n    }\n    show() {\n        basic.clearScreen();\n        switch (this.position) {\n            case 0: showBlock(0, 0); break;\n            case 1: showBlock(3, 0); break;\n            //case 2: showBlock(3, 3); break;\n            case 2: showBlock(0, 3); break;\n        }\n    }\n}\n\nfunction showBlock(x: number, y: number) {\n    led.plot(x, y)\n    led.plot(x, y + 1)\n    led.plot(x + 1, y)\n    led.plot(x + 1, y + 1)\n}\n\nnew Configuration()"],[1,"\n"]],"start1":0,"start2":0,"length1":4505,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":231,"start2":231,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// les tests vont ici ; cela ne sera pas compilé si ce paquet est utilisé en tant qu'extension.\n"}]}],"snapshots":[{"timestamp":1744884069611,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"scanner\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1744884154012}